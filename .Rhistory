library("swirl", lib.loc="~/R/win-library/3.4")
swirl()
true == true
TRUE == TRUE
(FALSE == TRuE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FASLE & FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE (6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(2, 4, 5)
mean(c(2, 4, 5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sum, c(2, 4, 6))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
past("Programming", "is, "fun!")
past("Programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("learning to program R", "today")
submit()
submit()
mad_libs("Malta", "green", "cow")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarter(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
x <- 1:10
x
x > 5
x <- 0
x
x <- 1:10
if(x > 5)
{{x}}
f <- function(x){}
f <- function(x){g <- function(y){y + z};z <- 4; x + g(x)}
f(3)
z <- 10
f(3)
x <- 5
x
y <- if(x<3){NA}else{10}
y
library(swirls)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
clas(cls_list)
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
laplly(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
sapply(flags, class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
sapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
head(iris)
apply(iris[,1:4], 2, means)
apply(iris[,1:4], 2, mean)
out <- apply(iris[,1:4], 2, mean)
class(out)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars(tapply(mpg, cyl, mean))
?
)
?with
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
hp <- tapply(mtcars$hp, mtcars$cyl, mean)
hp
hp[["8"]]
hp[["8"]] - hp[["4"]]
debug(ls)
?ls
ls{hp}
ls
ls
source('C:/Users/Thomas Miebach/datasciencecoursera/Data Cleaning/oauth2-github.r')
?GET
source('C:/Users/Thomas Miebach/datasciencecoursera/Data Cleaning/oauth2-github.r')
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "3915b63f24a5919cf7d0",
secret = "dbd9e55cdaeabbbd924b377f397e254ea870ec0a")
library("httr", lib.loc="~/R/win-library/3.4")
?oauth_endpoints
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "3915b63f24a5919cf7d0",
secret = "dbd9e55cdaeabbbd924b377f397e254ea870ec0a")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
library("httr", lib.loc="~/R/win-library/3.4")
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "3915b63f24a5919cf7d0",
secret = "dbd9e55cdaeabbbd924b377f397e254ea870ec0a")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
?oauth2.0_access_token
library("httr", lib.loc="~/R/win-library/3.4")
install.packages("httr")
library("jsonlite", lib.loc="~/R/win-library/3.4")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
y <- jsondata$name == "datasharing"
jsondata$created_at[y]
library("jsonlite", lib.loc="~/R/win-library/3.4")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
y <- jsondata$name == "datasharing"
jsondata$created_at[y]
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
y <- jsondata$name == "datasharing"
jsondata$created_at[y]
library("jsonlite", lib.loc="~/R/win-library/3.4")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
y <- jsondata$name == "datasharing"
jsondata$created_at[y]
getwd()
getwd()
dir
ls()
dir()
setwd(github)
setwd(GitHub)
getwd()
setwd(/GitHub)
setwd("GitHub")
dir()
setwd("programmingAssignment2")
dir()
source('C:/Users/Thomas Miebach/datasciencecoursera/R-programming/makeVector.r')
makeVector()
source('C:/Users/Thomas Miebach/datasciencecoursera/R-programming/cachemean.r')
test <- c(1, 2, 3, 4, 5, 6,, 7, 8, 9, 10)
test <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
mean(test)
cachemean(test)
class(test)
makevector(test)
makeVector(test)
cachemean(test)
source('C:/Users/Thomas Miebach/datasciencecoursera/R-programming/cachemean.r')
cachemean(test)
makeVector(1, 2, 3, 4, 5)
makeVector(c(1, 2, 3, 4, 5)
)
cachemean()
cachemean(c(1, 2, 3, 4, 5))
test$get(test)
test
makeVector()
?function
?function
()
)
class(test)
makeVector(test)
m
test$set
set(test)
test
class test
class(test)
list()
list(test)
list(test$set)
class(cachemean
)
class(makeVector)
makeVector(x)
try <- makeVector(test)
try
cachemean(try)
cachemean(try)
cachemean(try)
test <- (c(11,12,13,14,15,16,17,18,19,20))
cachemean(try)
makeVector(try)
cachemean(try)
test <- makeVector(1:10)
test
test$get()
test$getmean
test$getmean()
test$getmean()
test$setmean()
test$set
test$set()
test$set(1:10)
test$getmean()
cachemean(avector)
cachemean(test)
test$getmean
test$getmean()
test <- 1:10
test$getmean()
makeVector(test)
cachemean(test)
test$set(test)
test <- makeVector(1:10)
test$get()
test$getmean()
test$set()
test$set(1:10)
test$getmean()
test$getmean()
test$setmean()
test$setmean(1:10)
test$getmean()
test$get()
test$set()
test$set(1:10)
test
test$get()
test$getmean
test$getmean()
cachemean(test)
test$getmean()
cachemean(test)
cachemean(test)
test$set(20:30)
cachemean(test)
cachemean(test)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
amatrix <- makeCacheMatrix()
amatrix
cacheSolve(amatrix)
amatrix$get()
amatrix$get_m_inverse()
amatrix$set_m_inverse()
amatrix$get_m_inverse()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
?matrix
a <- matrix(1:25, ncol = 5, nrow = 5)
a
solve(a)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
solve(m1)
n1 <- solve(m1)
n1 %*% m1
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m1)
my_matrixobject <- makeCacheMatrix(m1)
cachesolve(my_matrixobject)
cacheSolve(my_matrixobject)
cacheSolve(my_matrixobject)
cacheSolve(my_matrixobject)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
n2
solve(n2)
my_matrixobject$set(n2)
cacheSolve(my_matrixobject)
cacheSolve(my_matrixobject)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(my_matrixobject)
my_matrixobject$set(n1)
cacheSolve(my_matrixobject)
cacheSolve(my_matrixobject)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(my_matrixobject)
my_matrixobject$get(n1)
my_matrixobject$get()
cacheSolve(my_matrixobject)
n1
n2
cacheSolve(n2)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
